{"version":3,"sources":["pages/trybe.svg","pages/celular.svg","pages/button-play.svg","pages/feedback.svg","reducers/quiz.js","reducers/index.js","store/index.js","actions/index.js","components/MainHeader.jsx","components/Loading.jsx","pages/Game.jsx","pages/Login.jsx","pages/Ranking.jsx","pages/Settings.jsx","pages/Feedback.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","questions","quiz","state","action","type","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","actions","fetchTriviaToken","dispatch","a","async","fetch","response","json","data","localStorage","setItem","token","fetchQuestions","console","log","results","savePlayer","email","name","hash","MD5","toString","gravatarEmail","player","score","assertions","JSON","stringify","MainHeader","parse","getItem","data-testid","src","alt","className","React","Component","Loading","trybe","Game","isClicked","isDisabled","timer","index","renderQuestion","bind","handleAnswer","nextQuestion","this","decrementTime","setInterval","setState","clearInterval","ranking","push","array","lastQuestion","target","elementCorrect","document","querySelector","textContent","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","category","sort","map","option","key","id","onClick","disabled","props","to","length","connect","fetchTriviaQuestions","Login","handle","handleSubmit","value","fetchTrivia","validEmail","RegExp","celular","onChange","placeholder","test","Ranking","b","play","Settings","Feedback","message","feedback","App","exact","path","render","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75fa7854.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trybe.e7579ad8.svg\";","module.exports = __webpack_public_path__ + \"static/media/celular.5eb07356.svg\";","module.exports = __webpack_public_path__ + \"static/media/button-play.5e2c9f33.svg\";","module.exports = __webpack_public_path__ + \"static/media/feedback.c2e8b070.svg\";","const INITIAL_STATE = {\n  questions: [],\n};\n\nconst quiz = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case '@QUIZ/SAVEQUESTION':\n    return { ...state, questions: action.state };\n  default:\n    return state;\n  }\n};\n\nexport default quiz;\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\n// import the reducers u created\nimport quiz from './quiz';\n\nconst rootReducer = combineReducers({ quiz });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import { MD5 } from 'crypto-js';\n\nasync function savePlayer(email, name) {\n  const hash = MD5(email).toString();\n  const gravatarEmail = `https://www.gravatar.com/avatar/${hash}`;\n  const player = {\n    player: {\n      name,\n      gravatarEmail,\n      score: 0,\n      assertions: 0,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(player));\n}\n\nconst saveQuestions = (state) => ({ type: '@QUIZ/SAVEQUESTION', state });\n\nfunction fetchTriviaToken() {\n  return async (dispatch) => {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    localStorage.setItem('token', data.token);\n    const questions = await fetch(`https://opentdb.com/api.php?amount=5&token=${data.token}`);\n    const fetchQuestions = await questions.json();\n    console.log(fetchQuestions.results);\n    dispatch(saveQuestions(fetchQuestions.results));\n  };\n}\n\nconst actions = { fetchTriviaToken, savePlayer };\n\nexport default actions;\n\n/* https://opentdb.com/api.php?amount=${quantidade-de-perguntas-retornadas}&token=${seu-token-aqui}\n\n// Recomendação\nhttps://opentdb.com/api.php?amount=5&token=${seu-token-aqui}\n */\n","import React from 'react';\nimport '../MainHeader.css';\n\nexport default class MainHeader extends React.Component {\n  render() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <header>\n        <img data-testid=\"header-profile-picture\" src={ player.gravatarEmail } alt=\"\" />\n        <div className=\"info-container\">\n          <h2 className=\"name\" data-testid=\"header-player-name\">{player.name}</h2>\n          <h3 data-testid=\"header-score\">\n            Score:\n            {' '}\n            {player.score}\n          </h3>\n        </div>\n      </header>\n    );\n  }\n}\n","import React from 'react';\nimport trybe from '../pages/trybe.svg';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <img className=\"loading\" src={ trybe } alt=\"Loading\" />\n    );\n  }\n}\n\nexport default Loading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport actions from '../actions';\nimport MainHeader from '../components/MainHeader';\nimport Loading from '../components/Loading';\nimport '../Game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isClicked: false,\n      isDisabled: false,\n      timer: 30,\n      index: 0,\n    };\n\n    this.renderQuestion = this.renderQuestion.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer();\n  }\n\n  timer() {\n    const oneSecond = 1000;\n    this.decrementTime = setInterval(() => {\n      const { timer } = this.state;\n      if (!timer) {\n        clearInterval(this.decrementTime);\n        this.setState({ isDisabled: true, isClicked: true });\n      } else {\n        this.setState({ timer: timer - 1 });\n      }\n    }, oneSecond);\n  }\n\n  nextQuestion() {\n    const { index } = this.state;\n    const limit = 4;\n    if (index === limit) {\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      const { player } = JSON.parse(localStorage.getItem('state'));\n      if (!ranking) {\n        const array = [player];\n        localStorage.setItem('ranking', JSON.stringify(array));\n      } else {\n        ranking.push(player);\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      }\n      return this.setState({ lastQuestion: true });\n    }\n    this.setState({\n      index: (index + 1), isClicked: false, timer: 30, isDisabled: false }, this.timer);\n  }\n\n  handleAnswer({ target }) {\n    clearInterval(this.decrementTime);\n    this.setState({ isClicked: true, isDisabled: true }, () => {\n      const elementCorrect = document.querySelector('.correct').textContent;\n      const state = JSON.parse(localStorage.getItem('state'));\n      if (elementCorrect === target.textContent) {\n        state.player.score += 10;\n        state.player.assertions += 1;\n      }\n      localStorage.setItem('state', JSON.stringify(state));\n    });\n  }\n\n  renderQuestion({ question,\n    correct_answer: correctAnswer, incorrect_answers: incorrectAnswers, category }) {\n    const { isClicked, isDisabled } = this.state;\n    return (\n      <div>\n        <h3 data-testid=\"question-category\">{category}</h3>\n        <h3 data-testid=\"question-text\">{question}</h3>\n        <div className=\"answer-container\">\n          {\n            [...incorrectAnswers, correctAnswer].sort().map((option, index) => (\n              <button\n                key={ index }\n                className={ (isClicked) && ((\n                  correctAnswer === option) ? 'correct' : 'wrong') }\n                type=\"button\"\n                id={\n                  correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`\n                }\n                data-testid={\n                  correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`\n                }\n                onClick={ this.handleAnswer }\n                disabled={ isDisabled }\n              >\n                {option}\n              </button>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { timer, isClicked, index, lastQuestion } = this.state;\n    if (lastQuestion) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"main-content\">\n        <div className=\"tablet-div\">\n          <MainHeader />\n          <main>\n            {\n              (questions.length) ? this.renderQuestion(questions[index]) : (\n                <Loading />)\n            }\n          </main>\n          <p>\n            <span>{timer}</span>\n          </p>\n          { isClicked && (\n            <button\n              className=\"button-next\"\n              data-testid=\"btn-next\"\n              type=\"button\"\n              onClick={ this.nextQuestion }\n            >\n              Próxima\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTriviaQuestions: () => dispatch(actions.fetchTriviaQuestions()),\n});\n\nconst mapStateToProps = (state) => ({\n  questions: state.quiz.questions,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport actions from '../actions';\nimport celular from './celular.svg';\nimport '../Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.handle = this.handle.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handle({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit() {\n    const { email, name } = this.state;\n    const { fetchTriviaToken: fetchTrivia } = this.props;\n    fetchTrivia();\n    actions.savePlayer(email, name);\n  }\n\n  render() {\n    const { name, email } = this.state;\n    const validEmail = new RegExp(/[\\w\\d]+@[\\w\\d]+[.]com+/);\n    return (\n      <div className=\"main-content\">\n        <img className=\"image-container\" src={ celular } alt=\"celular\" />\n        <div className=\"input-container\">\n          <input\n            onChange={ this.handle }\n            value={ name }\n            name=\"name\"\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            placeholder=\"Digite seu nome...\"\n          />\n          <input\n            onChange={ this.handle }\n            value={ email }\n            name=\"email\"\n            type=\"text\"\n            data-testid=\"input-gravatar-email\"\n            placeholder=\"Digite seu email...\"\n          />\n        </div>\n        <div className=\"btn-container\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ this.handleSubmit }\n          >\n            Configurações\n          </button>\n          <Link to=\"/game\">\n            <button\n              type=\"button\"\n              disabled={ !(name && validEmail.test(email)) }\n              data-testid=\"btn-play\"\n              onClick={ this.handleSubmit }\n            >\n              Jogar\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  fetchTriviaToken: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTriviaToken: () => dispatch(actions.fetchTriviaToken()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../Ranking.css';\nimport play from './button-play.svg';\n\nclass Ranking extends React.Component {\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    ranking.sort((a, b) => b.score - a.score);\n    return (\n      <div className=\"ranking-content\">\n        <div className=\"position-container\">\n          { ranking.map((player, index) => (\n            <div\n              className={ `ranking-container ${(index % 2) ? 'white' : 'purple'}` }\n              key={ index }\n            >\n              <p data-testid={ `player-name-${index}` }>{ player.name }</p>\n              <p data-testid={ `player-score-${index}` }>\n                {\n                  `Pontuação: ${player.score}`\n                }\n              </p>\n            </div>\n          )) }\n        </div>\n        <Link className=\"play\" to=\"/\">\n          <img src={ play } alt=\"button\" />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <div>\n        <header>\n          <h1 data-testid=\"settings-title\">{player.name}</h1>\n          <img src={ player.gravatarEmail } alt=\"avatar\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../Feedback.css';\nimport feedback from './feedback.svg';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super();\n    this.message = this.message.bind(this);\n  }\n\n  message(score) {\n    const limit = 3;\n    if (score < limit) {\n      return <p data-testid=\"feedback-text\">Podia ser melhor...</p>;\n    } return <p data-testid=\"feedback-text\">Mandou bem!</p>;\n  }\n\n  render() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <div className=\"feedback-content\">\n        <div className=\"score-container\">\n          <p data-testid=\"feedback-total-score\">{ `Pontuação: ${player.score}` }</p>\n          <p data-testid=\"feedback-total-question\">{ `Acertos: ${player.assertions}` }</p>\n        </div>\n        <img src={ feedback } alt=\"Pessoas\" className=\"image-feedback\" />\n        <div className=\"btn-feedback\">\n          <Link\n            to=\"/ranking\"\n          >\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n            >\n              Ver Ranking\n            </button>\n          </Link>\n          <Link\n            to=\"/\"\n          >\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n            >\n              Jogar novamente\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" render={ () => <Login /> } />\n        <Route exact path=\"/game\" render={ () => <Game /> } />\n        <Route exact path=\"/ranking\" render={ () => <Ranking /> } />\n        <Route exact path=\"/settings\" render={ () => <Settings /> } />\n        <Route exact path=\"/feedback\" render={ () => <Feedback /> } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}