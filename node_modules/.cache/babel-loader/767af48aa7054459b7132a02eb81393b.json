{"ast":null,"code":"var _jsxFileName = \"/home/caio/Projects/Javascript/trivia/src/pages/Game.jsx\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport actions from '../actions';\nimport MainHeader from '../components/MainHeader';\nimport Loading from '../components/Loading';\nimport '../Game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isClicked: false,\n      isDisabled: false,\n      timer: 30,\n      index: 0\n    };\n    this.renderQuestion = this.renderQuestion.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer();\n  }\n\n  timer() {\n    const oneSecond = 1000;\n    this.decrementTime = setInterval(() => {\n      const timer = this.state.timer;\n\n      if (!timer) {\n        clearInterval(this.decrementTime);\n        this.setState({\n          isDisabled: true,\n          isClicked: true\n        });\n      } else {\n        this.setState({\n          timer: timer - 1\n        });\n      }\n    }, oneSecond);\n  }\n\n  nextQuestion() {\n    const index = this.state.index;\n    const limit = 4;\n\n    if (index === limit) {\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n\n      const _JSON$parse = JSON.parse(localStorage.getItem('state')),\n            player = _JSON$parse.player;\n\n      if (!ranking) {\n        const array = [player];\n        localStorage.setItem('ranking', JSON.stringify(array));\n      } else {\n        ranking.push(player);\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      }\n\n      return this.setState({\n        lastQuestion: true\n      });\n    }\n\n    this.setState({\n      index: index + 1,\n      isClicked: false,\n      timer: 30,\n      isDisabled: false\n    }, this.timer);\n  }\n\n  handleAnswer({\n    target\n  }) {\n    clearInterval(this.decrementTime);\n    this.setState({\n      isClicked: true,\n      isDisabled: true\n    }, () => {\n      const elementCorrect = document.querySelector('.correct').textContent;\n      const state = JSON.parse(localStorage.getItem('state'));\n\n      if (elementCorrect === target.textContent) {\n        state.player.score += 10;\n        state.player.assertions += 1;\n      }\n\n      localStorage.setItem('state', JSON.stringify(state));\n    });\n  }\n\n  renderQuestion({\n    question,\n    correct_answer: correctAnswer,\n    incorrect_answers: incorrectAnswers,\n    category\n  }) {\n    const _this$state = this.state,\n          isClicked = _this$state.isClicked,\n          isDisabled = _this$state.isDisabled;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, category), React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, question), React.createElement(\"div\", {\n      className: \"answer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, [...incorrectAnswers, correctAnswer].sort().map((option, index) => React.createElement(\"button\", {\n      key: index,\n      className: isClicked && (correctAnswer === option ? 'correct' : 'wrong'),\n      type: \"button\",\n      id: correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`,\n      \"data-testid\": correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`,\n      onClick: this.handleAnswer,\n      disabled: isDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, option))));\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const _this$state2 = this.state,\n          timer = _this$state2.timer,\n          isClicked = _this$state2.isClicked,\n          index = _this$state2.index,\n          lastQuestion = _this$state2.lastQuestion;\n    if (lastQuestion) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"main-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tablet-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(MainHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, questions.length ? this.renderQuestion(questions[index]) : React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, timer)), isClicked && React.createElement(\"button\", {\n      className: \"button-next\",\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchTriviaQuestions: () => dispatch(actions.fetchTriviaQuestions())\n});\n\nconst mapStateToProps = state => ({\n  questions: state.quiz.questions\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/caio/Projects/Javascript/trivia/src/pages/Game.jsx"],"names":["PropTypes","React","connect","Redirect","actions","MainHeader","Loading","Game","Component","constructor","state","isClicked","isDisabled","timer","index","renderQuestion","bind","handleAnswer","nextQuestion","componentDidMount","oneSecond","decrementTime","setInterval","clearInterval","setState","limit","ranking","JSON","parse","localStorage","getItem","player","array","setItem","stringify","push","lastQuestion","target","elementCorrect","document","querySelector","textContent","score","assertions","question","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","category","sort","map","option","render","questions","props","length","propTypes","arrayOf","object","isRequired","mapDispatchToProps","dispatch","fetchTriviaQuestions","mapStateToProps","quiz"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport actions from '../actions';\nimport MainHeader from '../components/MainHeader';\nimport Loading from '../components/Loading';\nimport '../Game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isClicked: false,\n      isDisabled: false,\n      timer: 30,\n      index: 0,\n    };\n\n    this.renderQuestion = this.renderQuestion.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer();\n  }\n\n  timer() {\n    const oneSecond = 1000;\n    this.decrementTime = setInterval(() => {\n      const { timer } = this.state;\n      if (!timer) {\n        clearInterval(this.decrementTime);\n        this.setState({ isDisabled: true, isClicked: true });\n      } else {\n        this.setState({ timer: timer - 1 });\n      }\n    }, oneSecond);\n  }\n\n  nextQuestion() {\n    const { index } = this.state;\n    const limit = 4;\n    if (index === limit) {\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      const { player } = JSON.parse(localStorage.getItem('state'));\n      if (!ranking) {\n        const array = [player];\n        localStorage.setItem('ranking', JSON.stringify(array));\n      } else {\n        ranking.push(player);\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      }\n      return this.setState({ lastQuestion: true });\n    }\n    this.setState({\n      index: (index + 1), isClicked: false, timer: 30, isDisabled: false }, this.timer);\n  }\n\n  handleAnswer({ target }) {\n    clearInterval(this.decrementTime);\n    this.setState({ isClicked: true, isDisabled: true }, () => {\n      const elementCorrect = document.querySelector('.correct').textContent;\n      const state = JSON.parse(localStorage.getItem('state'));\n      if (elementCorrect === target.textContent) {\n        state.player.score += 10;\n        state.player.assertions += 1;\n      }\n      localStorage.setItem('state', JSON.stringify(state));\n    });\n  }\n\n  renderQuestion({ question,\n    correct_answer: correctAnswer, incorrect_answers: incorrectAnswers, category }) {\n    const { isClicked, isDisabled } = this.state;\n    return (\n      <div>\n        <h3 data-testid=\"question-category\">{category}</h3>\n        <h3 data-testid=\"question-text\">{question}</h3>\n        <div className=\"answer-container\">\n          {\n            [...incorrectAnswers, correctAnswer].sort().map((option, index) => (\n              <button\n                key={ index }\n                className={ (isClicked) && ((\n                  correctAnswer === option) ? 'correct' : 'wrong') }\n                type=\"button\"\n                id={\n                  correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`\n                }\n                data-testid={\n                  correctAnswer === option ? 'correct-answer' : `wrong-answer-${index}`\n                }\n                onClick={ this.handleAnswer }\n                disabled={ isDisabled }\n              >\n                {option}\n              </button>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { timer, isClicked, index, lastQuestion } = this.state;\n    if (lastQuestion) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"main-content\">\n        <div className=\"tablet-div\">\n          <MainHeader />\n          <main>\n            {\n              (questions.length) ? this.renderQuestion(questions[index]) : (\n                <Loading />)\n            }\n          </main>\n          <p>\n            <span>{timer}</span>\n          </p>\n          { isClicked && (\n            <button\n              className=\"button-next\"\n              data-testid=\"btn-next\"\n              type=\"button\"\n              onClick={ this.nextQuestion }\n            >\n              Próxima\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTriviaQuestions: () => dispatch(actions.fetchTriviaQuestions()),\n});\n\nconst mapStateToProps = (state) => ({\n  questions: state.quiz.questions,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}